#!/bin/bash
#SBATCH --time=24:00:00               # WALLTIME
#SBATCH -N 8                          # Number of nodes
#SBATCH --job-name SOWFA_ABL_tutorial # Name of job
#SBATCH --account=WHT000              # Wind program account code

nodes=$SLURM_JOB_NUM_NODES            # Number of nodes
cores=8                               # Number MPI processes to start on each node; 8 cores/node



# Function for refining the mesh globally in parallel.
refineMeshByCellSetGlobalParallel()
{
   for i in `seq 1 $1`;
   do
      echo "LEVEL $i PARALLEL GLOBAL REFINEMENT"
      echo "   selecting cells to refine with topoSet..."
      cp system/topoSetDict.global system/topoSetDict
      mpirun -np $(($nodes*$cores)) topoSet -parallel > log.topoSet.global.$i 2>&1

      echo "   refining cells with refineMesh..."
      cp system/refineMeshDict.global system/refineMeshDict
      mpirun -np $(($nodes*$cores)) refineMesh -parallel -dict > log.refineMesh.global.$i 2>&1
      shift
   done
}
 
refineMeshByCellSetLocal()
{
   for i in `seq 1 $1`;
   do
      echo "LEVEL $i SERIAL LOCAL REFINEMENT"
      echo "   selecting cells to refine with topoSet..."
      cp system/topoSetDict.local.$i system/topoSetDict
      topoSet > log.topoSet.local.$i 2>&1

      echo "   refining cells with refineMesh..."
      cp system/refineMeshDict.local.$i system/refineMeshDict
      refineMesh -dict -overwrite > log.refineMesh.local.$i 2>&1
  done
}

refineMeshByCellSetGlobal()
{
   for i in `seq 1 $1`;
   do
      echo "LEVEL $i SERIAL GLOBAL REFINEMENT"
      echo "   selecting cells to refine with topoSet..."
      cp system/topoSetDict.global system/topoSetDict
      topoSet > log.topoSet.global.$i 2>&1

      echo "   refining cells with refineMesh..."
      cp system/refineMeshDict.global system/refineMeshDict
      refineMesh -dict -overwrite > log.refineMesh.global.$i 2>&1
  done
}



# Make the mesh using blockMesh (serial)
echo "BUILDING THE BASE MESH WITH blockMesh..."
blockMesh > log.blockMesh 2>&1

# Get rid of any initial files and replace with 0.original files (serial)
rm -rf 12000
cp -rf 12000.original 12000

# Copy the first available boundaryData file to the start time.
cp -rf ../../precursorABL/neutral/boundaryData/west/12000.6053269 ../../precursorABL/neutral/boundaryData/west/12000
cp -rf ../../precursorABL/neutral/boundaryData/south/12000.6053269 ../../precursorABL/neutral/boundaryData/south/12000

# Add the turbine/wake local refinement regions (serial)
refineMeshByCellSetGlobal 1

# Add the turbine/wake local refinement regions (serial)
refineMeshByCellSetLocal 3

# Run changeDictionary to change the boundary condition types from periodic to inflow/outflow
echo "CHANGING BOUNDARY CONDITIONS FROM PERIODIC TO INFLOW/OUTFLOW WITH changeDictionary..."
changeDictionary > log.changeDictionary 2>&1

# Renumber the mesh now that it has been refined (serial)
echo "RENUMBERING THE REFINED MESH WITH renumberMesh..."
renumberMesh -overwrite > log.renumberMesh 2>&1

# Decompose the mesh and solution files (serial)
echo "DECOMPOSING THE MESH WITH decomposePar..."
decomposePar -cellDist -force > log.decomposePar 2>&1

# Map the precursor field over to the wind plant field (serial)
echo "MAPPING THE FLOW FIELD WITH mapFields..."
mapFields ../../precursorABL/neutral -sourceTime 12000 -parallelSource -parallelTarget -mapMethod mapNearest > log.mapFields 2>&1
# Update boundary values (parallel)

echo "UPDATING BOUNDARY VALUES WITH setFieldsABL..."
mpirun -np $(($nodes*$cores)) setFieldsABL -parallel > log.setFieldsABL 2>&1

# Run the solver up to 12750 s (parallel)
echo "RUNNING THE SOLVER windPlantPisoSolver..."
mpirun -np $(($nodes*$cores)) windPlantPisoSolver -parallel > log.windPlantPisoSolver.1 2>&1
